df <- read_csv("./datasets/samsung/samsungdata.csv")
library(rmarkdown)
library(pander)
library(ggplot2)
library(readr)
df <- read_csv("./datasets/samsung/samsungdata.csv")
df = data.frame(df)
#Training dataset
samtrain = read.csv('./datasets/samsung/samtrain.csv')
#Test datasets
samval = read.csv('./datasets/samsung/samval.csv')
samtest = read.csv('./datasets/samsung/samtest.csv')
View(samtrain)
# We use the R 'randomForest' package
#install.packages("randomForest")
library(randomForest)
set.seed(1234)
# Create a Random Forest model with default parameters
model1 <- randomForest(activity ~ .-subject, data = samtrain, importance = TRUE)
# Create a Random Forest model with default parameters
model1 <- randomForest(activity ~ .-subject, data = samtrain, importance = TRUE)
model1
100-1.37
View(model1)
model1$err.rate
View(model1)
model1$xlevels
model1$predicted
model1$confusion
model1$localImportance
model1$proximity
model1$forest
model1$forest$xlevels
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
#install.packages("caret")
library(caret)
library(caret)
install.packages("caret")
library(caret)
VI_F=importance(model1)
require(randomForest)
fit = randomForest(factor(activity)~.-subject, data = samtrain)
VI_F=importance(fit)
VI_F
importance
importance(model1)
importance(model1, type = 1)
importance(model1, type = 2)
#This is the extractor function for variable importance measures as produced by randomForest.
#type = either 1 or 2, specifying the type of importance measure (1=mean decrease in accuracy, 2=mean decrease in node impurity).
importance(model1)
#This is the extractor function for variable importance measures as produced by randomForest.
#type = either 1 or 2, specifying the type of importance measure (1=mean decrease in accuracy, 2=mean decrease in node impurity).
importance(model1, type = 1)
importance(model1, type = 2)
View(samval)
val_pred = predict(model1, samval[,-c(37,38)])
samval[,-c(37,38)]
val_pred = predict(model1, samval[,-c(37,38)], predict.all = TRUE))
val_pred = predict(model1, samval[,-c(37,38)], predict.all = TRUE)
factor(df$activity)
View(samval)
val_pred = predict(model1, newdata=samval[,-c(37,38)], predict.all = TRUE, type = 'class')
val_pred = predict(model1, newdata=data.frame(samval[,-c(37,38)]), predict.all = TRUE, type = 'class')
samval[,-c(37,38)
samval[,-c(37,38)]
samval
samval[,-c(37,38)]
View(samval)
View(model1)
val_pred = predict(model1, newdata=samval[,-c(37)], type = 'class')
val_pred = predict(model1, newdata=samval[,-c(38)], type = 'class')
val
val_pred
val_pred$aggregate
val_pred$individual
table(observed = samval[,38], predicted = val_pred)
table(observed = samval[,38], predicted = val_pred)
mean(val_pred == samval$activity)
test_pred = predict(model1, newdata=samtest[,-c(38)], type = 'class')
table(observed = samtest[,38], predicted = test_pred)
test_pred = predict(model1, newdata=samtest[,-c(38)], type = 'class')
table(observed = samtest[,38], predicted = test_pred)
print("mean accuracy score for validation set: " mean(val_pred == samval$activity))
print("mean accuracy score for validation set: ", mean(val_pred == samval$activity))
print("mean accuracy score for validation set: %f", mean(val_pred == samval$activity))
sprintf("mean accuracy score for validation set:", mean(val_pred == samval$activity))
sprintf("mean accuracy score for validation set:%f", mean(val_pred == samval$activity))
sprintf("mean accuracy score for validation set: %f", mean(val_pred == samval$activity))
sprintf("mean accuracy score for validation set: %f", mean(test_pred == samtest$activity))
# use the confusion matrix to see how observations were misclassified as other activities
table(observed = samtest[,38], predicted = test_pred)
test_pred
# Accuracy
sprintf("Accuracy = %f", mean(test_pred == samtest$activity))
# use the confusion matrix to see how observations were misclassified as other activities
confusion_matrix = table(observed = samtest[,38], predicted = test_pred)
confusion_matrix
# Accuracy
sprintf("Accuracy = %f", confusion_matrix)
mean(test_pred == samtest$activity)
# use the confusion matrix to see how observations were misclassified as other activities
confusion_matrix = table(observed = samtest[,38], predicted = test_pred)
confusion_matrix
Recall(confusion_matrix)
recall(confusion_matrix)
library(caret)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
library(updateR)
library(dplR)
library(updateR)
